<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.ham.main.member.MemberDAO">

  	
  	<!-- 회원가입 -->
  	<insert id="setMemberJoin" parameterType="MemberDTO">
  		INSERT INTO MEMBER (ID, PASSWORD, NAME, EMAIL, EMAILDOMAIN, PHONE)
  			VALUES (#{id}, #{password}, #{name}, #{email}, #{emailDomain}, #{phone})
  	</insert>
  	
  	<select id="getMemberByEmail" resultType="MemberDTO">
  		SELECT * FROM MEMBER WHERE EMAIL = #{email} AND EMAILDOMAIN = #{emailDomain}
  	</select>
  	
  	<!-- 로그인 -->
 
	<select id="getLogin" resultMap="getLoginResult" resultType="MemberDTO">
		SELECT M.*, R.* 
			FROM MEMBER M 
			INNER JOIN MEMBERROLE MR
			ON(M.ID = MR.ID)
			INNER JOIN ROLE R
			ON(MR.ROLENUM = R.ROLENUM)
			WHERE M.ID = #{id} AND M.PASSWORD = #{password}
    </select>
   
	
	<resultMap type="MemberDTO" id="getLoginResult">
  		<!-- column의 이름과 setter의 이름이 같아야함. -->
  		<id column="ID" property="id"/>
  		<result column="PASSWORD" property="password"/>
  		<result column="NAME" property="name"/>
  		<result column="EMAIL" property="email"/>
  		<result column="PHONE" property="phone"/> 
    
  		<collection property="roles" javaType="List" ofType="RoleDTO">
			<id column="ROLENUM" property="roleNum"/>
			<result column="ROLENAME" property="roleName"/>
		</collection>
  	</resultMap>
  	
  	<insert id="setMemberRole" parameterType="MemberDTO">
  		INSERT INTO MEMBERROLE (ID, ROLENUM) 
  			VALUES (#{id}, (SELECT ROLENUM FROM ROLE WHERE ROLENAME='MEMBER'))
  	</insert>
  	
  	<!-- ID 중복체크 -->
  	<select id="getIdCheck" parameterType="MemberDTO" resultType="MemberDTO">
  		SELECT ID FROM MEMBER WHERE ID = #{id} 
  	</select>
  	
  	<!-- 회원정보 수정 -->
    <update id="setMemberUpdate" parameterType="memberDTO">
    	UPDATE MEMBER 
    		SET PASSWORD = #{password}, NAME = #{name}, EMAIL = #{email}, EMAILDOMAIN = #{emailDomain}, PHONE = #{phone}
    			WHERE ID = #{id}
    </update>
    
    <!-- 카카오로그인 -->
    <select id="getKakaoLogin" parameterType="KakaoDTO" resultType="Long">
    	SELECT COUNT(ID) FROM KAKAO 
    </select>
    
    <!-- 카카오회원가입 DB저장 -->
    <insert id="setKakaoJoin" parameterType="KakaoDTO">
    	INSERT INTO KAKAO (ID, KAKAONAME, KAKAOEMAIL)
    		VALUES (#{id}, #{kakaoName}, #{kakaoEmail})
    </insert>


  	
  	
  	<select id="memberTelCount" resultType="Long" parameterType="MemberDTO">
  	    SELECT COUNT(PHONE) FROM MEMBER
  	     WHERE PHONE=#{phone}
  	</select>
  	
  	<select id="getBySnsNaver" resultType="MemberDTO">
        SELECT * FROM MEMBER WHERE NAVERID = #{naverId}
    </select>
    
    <select id="getDetail" resultType="MemberDTO" parameterType="MemberDTO">
        SELECT * 
          FROM MEMBER
         WHERE ID=#{id} 
    </select>
    
    
    <update id="adminAdd" parameterType="MemberDTO">
 UPDATE MEMBERROLE 
    SET ROLENUM=3
  WHERE ROLENUM IN (SELECT MR.ROLENUM
		             FROM MEMBER M 
			         INNER JOIN MEMBERROLE MR
			         ON M.ID = MR.ID
			         WHERE M.ID = #{id})
    </update>
    
    <update id="adminRemove" parameterType="MemberDTO">
    UPDATE MEMBERROLE 
       SET ROLENUM=2
     WHERE ROLENUM IN (SELECT MR.ROLENUM
	     	             FROM MEMBER M 
	     		         INNER JOIN MEMBERROLE MR
	      		         ON M.ID = MR.ID
	    		         WHERE M.ID = #{id})
    </update>
  	
  <update id="partnerAdd" parameterType="MemberDTO">
  UPDATE MEMBERROLE 
    SET ROLENUM=2
  WHERE ROLENUM IN (SELECT MR.ROLENUM
		             FROM MEMBER M 
			         INNER JOIN MEMBERROLE MR
			         ON M.ID = MR.ID
			         WHERE M.ID = #{id})
  </update>	
  
   <update id="partnerRemove" parameterType="MemberDTO">
    UPDATE MEMBERROLE 
    SET ROLENUM=1
  WHERE ROLENUM IN (SELECT MR.ROLENUM
		             FROM MEMBER M 
			         INNER JOIN MEMBERROLE MR
			         ON M.ID = MR.ID
			         WHERE M.ID = #{id})
    </update>
  	

  </mapper>
  